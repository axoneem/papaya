import { useCallback, useEffect, useRef, useState } from "react"


interface SyncLockContext {
    
}

const isDeepEqual = (object1: any, object2: any) => {

    const objKeys1 = Object.keys(object1);
    const objKeys2 = Object.keys(object2);

    if (objKeys1.length !== objKeys2.length) return false;

    for (var key of objKeys1) {
        const value1 = object1[key];
        const value2 = object2[key];

        const isObjects = isObject(value1) && isObject(value2);

        if ((isObjects && !isDeepEqual(value1, value2)) ||
            (!isObjects && value1 !== value2)
        ) {
            return false;
        }
    }
    return true;
};

const isObject = (object: any) => {
    return object != null && typeof object === "object";
};

const SyncLockContextProvider = () => {
    const locksRef = useRef<Set<string>>(new Set())

    useEffect(() => {
        const handleBeforeUnload = (e: BeforeUnloadEvent) => {
            if (locksRef.current.size > 0) {
                e.preventDefault()
                e.returnValue = ''
                return ''
            }
        }

        if (locksRef.current.size > 0) {
            window.addEventListener('beforeunload', handleBeforeUnload)
        } else {
            window.removeEventListener('beforeunload', handleBeforeUnload)
        }

        return () => {
            window.removeEventListener('beforeunload', handleBeforeUnload)
        }
    }, [locksRef.current.size])

    const checkLock = useCallback((key: string) => {
        return locksRef.current.has(key) ? 'LOCKED' : 'UNLOCKED'
    }, [locksRef.current])

    return (
        <
    )
}